/**
 * generated by Xtext 2.28.0
 */
package gameOfLife.gameOfLifeDSL.impl;

import gameOfLife.gameOfLifeDSL.EvolutionRule;
import gameOfLife.gameOfLifeDSL.GameOfLife;
import gameOfLife.gameOfLifeDSL.GameOfLifeDSLPackage;
import gameOfLife.gameOfLifeDSL.Point;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game Of Life</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link gameOfLife.gameOfLifeDSL.impl.GameOfLifeImpl#getAliveCells <em>Alive Cells</em>}</li>
 *   <li>{@link gameOfLife.gameOfLifeDSL.impl.GameOfLifeImpl#getEvolutionRules <em>Evolution Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameOfLifeImpl extends MinimalEObjectImpl.Container implements GameOfLife
{
  /**
   * The cached value of the '{@link #getAliveCells() <em>Alive Cells</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAliveCells()
   * @generated
   * @ordered
   */
  protected EList<Point> aliveCells;

  /**
   * The cached value of the '{@link #getEvolutionRules() <em>Evolution Rules</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvolutionRules()
   * @generated
   * @ordered
   */
  protected EList<EvolutionRule> evolutionRules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameOfLifeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GameOfLifeDSLPackage.Literals.GAME_OF_LIFE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Point> getAliveCells()
  {
    if (aliveCells == null)
    {
      aliveCells = new EObjectContainmentEList<Point>(Point.class, this, GameOfLifeDSLPackage.GAME_OF_LIFE__ALIVE_CELLS);
    }
    return aliveCells;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<EvolutionRule> getEvolutionRules()
  {
    if (evolutionRules == null)
    {
      evolutionRules = new EObjectContainmentEList<EvolutionRule>(EvolutionRule.class, this, GameOfLifeDSLPackage.GAME_OF_LIFE__EVOLUTION_RULES);
    }
    return evolutionRules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GameOfLifeDSLPackage.GAME_OF_LIFE__ALIVE_CELLS:
        return ((InternalEList<?>)getAliveCells()).basicRemove(otherEnd, msgs);
      case GameOfLifeDSLPackage.GAME_OF_LIFE__EVOLUTION_RULES:
        return ((InternalEList<?>)getEvolutionRules()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GameOfLifeDSLPackage.GAME_OF_LIFE__ALIVE_CELLS:
        return getAliveCells();
      case GameOfLifeDSLPackage.GAME_OF_LIFE__EVOLUTION_RULES:
        return getEvolutionRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GameOfLifeDSLPackage.GAME_OF_LIFE__ALIVE_CELLS:
        getAliveCells().clear();
        getAliveCells().addAll((Collection<? extends Point>)newValue);
        return;
      case GameOfLifeDSLPackage.GAME_OF_LIFE__EVOLUTION_RULES:
        getEvolutionRules().clear();
        getEvolutionRules().addAll((Collection<? extends EvolutionRule>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GameOfLifeDSLPackage.GAME_OF_LIFE__ALIVE_CELLS:
        getAliveCells().clear();
        return;
      case GameOfLifeDSLPackage.GAME_OF_LIFE__EVOLUTION_RULES:
        getEvolutionRules().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GameOfLifeDSLPackage.GAME_OF_LIFE__ALIVE_CELLS:
        return aliveCells != null && !aliveCells.isEmpty();
      case GameOfLifeDSLPackage.GAME_OF_LIFE__EVOLUTION_RULES:
        return evolutionRules != null && !evolutionRules.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //GameOfLifeImpl
