package gameOfLife.generator

import gameOfLife.gameOfLifeDSL.GameOfLife
import gameOfLife.gameOfLifeDSL.Condition
import gameOfLife.gameOfLifeDSL.Rule
import gameOfLife.gameOfLifeDSL.Action

class JavaGenerator {
	
	def static toJava(GameOfLife root)'''
		package GameOfLife;
	
		import java.awt.Point;
		import java.util.ArrayList;
	
		public class RulesOfLife {
	      public static ArrayList<Point> setAliveCells() {
	      	ArrayList<Point> points = new ArrayList<Point>(0);
	        
	        «FOR p : root.aliveCells»
	          	points.add(new Point(«p.x», «p.y»));
	        «ENDFOR»
	        
	        return points;
	      }
	
		public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {
        	// Iterate through the array, follow game of life rules
       	 for (int i=1; i<gameBoard.length-1; i++) {
            for (int j=1; j<gameBoard[0].length-1; j++) {
                int surrounding = 0;
                if (gameBoard[i-1][j-1]) { surrounding++; }
                if (gameBoard[i-1][j])   { surrounding++; }
                if (gameBoard[i-1][j+1]) { surrounding++; }
                if (gameBoard[i][j-1])   { surrounding++; }
                if (gameBoard[i][j+1])   { surrounding++; }
                if (gameBoard[i+1][j-1]) { surrounding++; }
                if (gameBoard[i+1][j])   { surrounding++; }
                if (gameBoard[i+1][j+1]) { surrounding++; }
				        «FOR r: root.rules» 
				        «getRules(r)»
				        «ENDFOR»
            }
        }
	}
	
	}
		
		'''	
	def static String getRules(Rule r) {
		switch(r.action) {
			case Action::LIVE:
				return '''
				if (gameBoard[i][j] && (surrounding «getValidCondition(r.condition)» «r.amount»)) {
					survivingCells.add(new Point(i-1,j-1));
				}
				'''
			case Action::DIE:
				return '''
				if (gameBoard[i][j] && (surrounding «getValidCondition(r.condition)» «r.amount»)) {
					continue;
				}
				'''
			case Action::BECOMEALIVE:
				return '''
				if ((!gameBoard[i][j]) && (surrounding «getValidCondition(r.condition)» «r.amount»)) {
					survivingCells.add(new Point(i-1,j-1));
				}
				'''	
		}
	}
	
	def static String getValidCondition (Condition c) { 
		switch(c) { 
			 case Condition::GREATER: return '''>'''
			 case Condition::LOWER: return '''<''' 
			 case Condition::EQUAL: return '''==''' 
		} 
	} 
}