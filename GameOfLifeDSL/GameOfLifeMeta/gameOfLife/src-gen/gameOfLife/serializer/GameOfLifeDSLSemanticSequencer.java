/*
 * generated by Xtext 2.28.0
 */
package gameOfLife.serializer;

import com.google.inject.Inject;
import gameOfLife.gameOfLifeDSL.EvolutionRule;
import gameOfLife.gameOfLifeDSL.GameOfLife;
import gameOfLife.gameOfLifeDSL.GameOfLifeDSLPackage;
import gameOfLife.gameOfLifeDSL.Point;
import gameOfLife.services.GameOfLifeDSLGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GameOfLifeDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameOfLifeDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GameOfLifeDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GameOfLifeDSLPackage.EVOLUTION_RULE:
				sequence_EvolutionRule(context, (EvolutionRule) semanticObject); 
				return; 
			case GameOfLifeDSLPackage.GAME_OF_LIFE:
				sequence_GameOfLife(context, (GameOfLife) semanticObject); 
				return; 
			case GameOfLifeDSLPackage.POINT:
				sequence_Point(context, (Point) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     EvolutionRule returns EvolutionRule
	 *
	 * Constraint:
	 *     (conditionElement=ConditionElement amount=INT action=Action)
	 * </pre>
	 */
	protected void sequence_EvolutionRule(ISerializationContext context, EvolutionRule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameOfLifeDSLPackage.Literals.EVOLUTION_RULE__CONDITION_ELEMENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameOfLifeDSLPackage.Literals.EVOLUTION_RULE__CONDITION_ELEMENT));
			if (transientValues.isValueTransient(semanticObject, GameOfLifeDSLPackage.Literals.EVOLUTION_RULE__AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameOfLifeDSLPackage.Literals.EVOLUTION_RULE__AMOUNT));
			if (transientValues.isValueTransient(semanticObject, GameOfLifeDSLPackage.Literals.EVOLUTION_RULE__ACTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameOfLifeDSLPackage.Literals.EVOLUTION_RULE__ACTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEvolutionRuleAccess().getConditionElementConditionElementEnumRuleCall_3_0(), semanticObject.getConditionElement());
		feeder.accept(grammarAccess.getEvolutionRuleAccess().getAmountINTTerminalRuleCall_4_0(), semanticObject.getAmount());
		feeder.accept(grammarAccess.getEvolutionRuleAccess().getActionActionEnumRuleCall_6_0(), semanticObject.getAction());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GameOfLife returns GameOfLife
	 *
	 * Constraint:
	 *     (aliveCells+=Point+ evolutionRules+=EvolutionRule+)
	 * </pre>
	 */
	protected void sequence_GameOfLife(ISerializationContext context, GameOfLife semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Point returns Point
	 *
	 * Constraint:
	 *     (x=INT y=INT)
	 * </pre>
	 */
	protected void sequence_Point(ISerializationContext context, Point semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GameOfLifeDSLPackage.Literals.POINT__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameOfLifeDSLPackage.Literals.POINT__X));
			if (transientValues.isValueTransient(semanticObject, GameOfLifeDSLPackage.Literals.POINT__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GameOfLifeDSLPackage.Literals.POINT__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
}
