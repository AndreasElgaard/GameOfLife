/*
 * generated by Xtext 2.28.0
 */
grammar InternalGameOfLifeDSL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package gameOfLife.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package gameOfLife.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import gameOfLife.services.GameOfLifeDSLGrammarAccess;

}
@parser::members {
	private GameOfLifeDSLGrammarAccess grammarAccess;

	public void setGrammarAccess(GameOfLifeDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleGameOfLife
entryRuleGameOfLife
:
{ before(grammarAccess.getGameOfLifeRule()); }
	 ruleGameOfLife
{ after(grammarAccess.getGameOfLifeRule()); } 
	 EOF 
;

// Rule GameOfLife
ruleGameOfLife 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGameOfLifeAccess().getGroup()); }
		(rule__GameOfLife__Group__0)
		{ after(grammarAccess.getGameOfLifeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePoint
entryRulePoint
:
{ before(grammarAccess.getPointRule()); }
	 rulePoint
{ after(grammarAccess.getPointRule()); } 
	 EOF 
;

// Rule Point
rulePoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPointAccess().getGroup()); }
		(rule__Point__Group__0)
		{ after(grammarAccess.getPointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvolutionRule
entryRuleEvolutionRule
:
{ before(grammarAccess.getEvolutionRuleRule()); }
	 ruleEvolutionRule
{ after(grammarAccess.getEvolutionRuleRule()); } 
	 EOF 
;

// Rule EvolutionRule
ruleEvolutionRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEvolutionRuleAccess().getGroup()); }
		(rule__EvolutionRule__Group__0)
		{ after(grammarAccess.getEvolutionRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule ConditionElement
ruleConditionElement
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionElementAccess().getAlternatives()); }
		(rule__ConditionElement__Alternatives)
		{ after(grammarAccess.getConditionElementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Action
ruleAction
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getAlternatives()); }
		(rule__Action__Alternatives)
		{ after(grammarAccess.getActionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionElement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionElementAccess().getLOWEREnumLiteralDeclaration_0()); }
		('<')
		{ after(grammarAccess.getConditionElementAccess().getLOWEREnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionElementAccess().getGREATEREnumLiteralDeclaration_1()); }
		('>')
		{ after(grammarAccess.getConditionElementAccess().getGREATEREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionElementAccess().getEQUALEnumLiteralDeclaration_2()); }
		('==')
		{ after(grammarAccess.getConditionElementAccess().getEQUALEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActionAccess().getDIEEnumLiteralDeclaration_0()); }
		('die')
		{ after(grammarAccess.getActionAccess().getDIEEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getLIVEEnumLiteralDeclaration_1()); }
		('live')
		{ after(grammarAccess.getActionAccess().getLIVEEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getActionAccess().getBECOMEALIVEEnumLiteralDeclaration_2()); }
		('becomeAlive')
		{ after(grammarAccess.getActionAccess().getBECOMEALIVEEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameOfLife__Group__0__Impl
	rule__GameOfLife__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameOfLifeAccess().getGameOfLifeKeyword_0()); }
	'GameOfLife:'
	{ after(grammarAccess.getGameOfLifeAccess().getGameOfLifeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameOfLife__Group__1__Impl
	rule__GameOfLife__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameOfLifeAccess().getAliveCellsKeyword_1()); }
	'aliveCells:'
	{ after(grammarAccess.getGameOfLifeAccess().getAliveCellsKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameOfLife__Group__2__Impl
	rule__GameOfLife__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGameOfLifeAccess().getAliveCellsAssignment_2()); }
		(rule__GameOfLife__AliveCellsAssignment_2)
		{ after(grammarAccess.getGameOfLifeAccess().getAliveCellsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getGameOfLifeAccess().getAliveCellsAssignment_2()); }
		(rule__GameOfLife__AliveCellsAssignment_2)*
		{ after(grammarAccess.getGameOfLifeAccess().getAliveCellsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameOfLife__Group__3__Impl
	rule__GameOfLife__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGameOfLifeAccess().getEvolutionRulesKeyword_3()); }
	'evolutionRules:'
	{ after(grammarAccess.getGameOfLifeAccess().getEvolutionRulesKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GameOfLife__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getGameOfLifeAccess().getEvolutionRulesAssignment_4()); }
		(rule__GameOfLife__EvolutionRulesAssignment_4)
		{ after(grammarAccess.getGameOfLifeAccess().getEvolutionRulesAssignment_4()); }
	)
	(
		{ before(grammarAccess.getGameOfLifeAccess().getEvolutionRulesAssignment_4()); }
		(rule__GameOfLife__EvolutionRulesAssignment_4)*
		{ after(grammarAccess.getGameOfLifeAccess().getEvolutionRulesAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Point__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__0__Impl
	rule__Point__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getPointAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__1__Impl
	rule__Point__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getXAssignment_1()); }
	(rule__Point__XAssignment_1)
	{ after(grammarAccess.getPointAccess().getXAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__2__Impl
	rule__Point__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getPointAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__3__Impl
	rule__Point__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getYAssignment_3()); }
	(rule__Point__YAssignment_3)
	{ after(grammarAccess.getPointAccess().getYAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Point__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPointAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPointAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EvolutionRule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__0__Impl
	rule__EvolutionRule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getEvolutionRuleKeyword_0()); }
	'EvolutionRule'
	{ after(grammarAccess.getEvolutionRuleAccess().getEvolutionRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__1__Impl
	rule__EvolutionRule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getEvolutionRuleAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__2__Impl
	rule__EvolutionRule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getSurroundingKeyword_2()); }
	'surrounding'
	{ after(grammarAccess.getEvolutionRuleAccess().getSurroundingKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__3__Impl
	rule__EvolutionRule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getConditionElementAssignment_3()); }
	(rule__EvolutionRule__ConditionElementAssignment_3)
	{ after(grammarAccess.getEvolutionRuleAccess().getConditionElementAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__4__Impl
	rule__EvolutionRule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getAmountAssignment_4()); }
	(rule__EvolutionRule__AmountAssignment_4)
	{ after(grammarAccess.getEvolutionRuleAccess().getAmountAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__5__Impl
	rule__EvolutionRule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getEvolutionRuleAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__6__Impl
	rule__EvolutionRule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getActionAssignment_6()); }
	(rule__EvolutionRule__ActionAssignment_6)
	{ after(grammarAccess.getEvolutionRuleAccess().getActionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EvolutionRule__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEvolutionRuleAccess().getRightParenthesisKeyword_7()); }
	')'
	{ after(grammarAccess.getEvolutionRuleAccess().getRightParenthesisKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GameOfLife__AliveCellsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameOfLifeAccess().getAliveCellsPointParserRuleCall_2_0()); }
		rulePoint
		{ after(grammarAccess.getGameOfLifeAccess().getAliveCellsPointParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GameOfLife__EvolutionRulesAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGameOfLifeAccess().getEvolutionRulesEvolutionRuleParserRuleCall_4_0()); }
		ruleEvolutionRule
		{ after(grammarAccess.getGameOfLifeAccess().getEvolutionRulesEvolutionRuleParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__XAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Point__YAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__ConditionElementAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRuleAccess().getConditionElementConditionElementEnumRuleCall_3_0()); }
		ruleConditionElement
		{ after(grammarAccess.getEvolutionRuleAccess().getConditionElementConditionElementEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__AmountAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRuleAccess().getAmountINTTerminalRuleCall_4_0()); }
		RULE_INT
		{ after(grammarAccess.getEvolutionRuleAccess().getAmountINTTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EvolutionRule__ActionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEvolutionRuleAccess().getActionActionEnumRuleCall_6_0()); }
		ruleAction
		{ after(grammarAccess.getEvolutionRuleAccess().getActionActionEnumRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
