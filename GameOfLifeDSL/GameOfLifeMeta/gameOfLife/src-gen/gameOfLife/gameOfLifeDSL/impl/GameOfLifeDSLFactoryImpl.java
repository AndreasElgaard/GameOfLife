/**
 * generated by Xtext 2.28.0
 */
package gameOfLife.gameOfLifeDSL.impl;

import gameOfLife.gameOfLifeDSL.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class GameOfLifeDSLFactoryImpl extends EFactoryImpl implements GameOfLifeDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static GameOfLifeDSLFactory init()
  {
    try
    {
      GameOfLifeDSLFactory theGameOfLifeDSLFactory = (GameOfLifeDSLFactory)EPackage.Registry.INSTANCE.getEFactory(GameOfLifeDSLPackage.eNS_URI);
      if (theGameOfLifeDSLFactory != null)
      {
        return theGameOfLifeDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new GameOfLifeDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameOfLifeDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case GameOfLifeDSLPackage.GAME_OF_LIFE: return createGameOfLife();
      case GameOfLifeDSLPackage.POINT: return createPoint();
      case GameOfLifeDSLPackage.EVOLUTION_RULE: return createEvolutionRule();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GameOfLifeDSLPackage.CONDITION_ELEMENT:
        return createConditionElementFromString(eDataType, initialValue);
      case GameOfLifeDSLPackage.ACTION:
        return createActionFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case GameOfLifeDSLPackage.CONDITION_ELEMENT:
        return convertConditionElementToString(eDataType, instanceValue);
      case GameOfLifeDSLPackage.ACTION:
        return convertActionToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GameOfLife createGameOfLife()
  {
    GameOfLifeImpl gameOfLife = new GameOfLifeImpl();
    return gameOfLife;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Point createPoint()
  {
    PointImpl point = new PointImpl();
    return point;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EvolutionRule createEvolutionRule()
  {
    EvolutionRuleImpl evolutionRule = new EvolutionRuleImpl();
    return evolutionRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionElement createConditionElementFromString(EDataType eDataType, String initialValue)
  {
    ConditionElement result = ConditionElement.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertConditionElementToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Action createActionFromString(EDataType eDataType, String initialValue)
  {
    Action result = Action.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertActionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GameOfLifeDSLPackage getGameOfLifeDSLPackage()
  {
    return (GameOfLifeDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static GameOfLifeDSLPackage getPackage()
  {
    return GameOfLifeDSLPackage.eINSTANCE;
  }

} //GameOfLifeDSLFactoryImpl
