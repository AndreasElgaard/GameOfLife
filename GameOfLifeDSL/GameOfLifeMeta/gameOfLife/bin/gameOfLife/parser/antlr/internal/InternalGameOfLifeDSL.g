/*
 * generated by Xtext 2.28.0
 */
grammar InternalGameOfLifeDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package gameOfLife.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package gameOfLife.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import gameOfLife.services.GameOfLifeDSLGrammarAccess;

}

@parser::members {

 	private GameOfLifeDSLGrammarAccess grammarAccess;

    public InternalGameOfLifeDSLParser(TokenStream input, GameOfLifeDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GameOfLife";
   	}

   	@Override
   	protected GameOfLifeDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGameOfLife
entryRuleGameOfLife returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGameOfLifeRule()); }
	iv_ruleGameOfLife=ruleGameOfLife
	{ $current=$iv_ruleGameOfLife.current; }
	EOF;

// Rule GameOfLife
ruleGameOfLife returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='GameOfLife:'
		{
			newLeafNode(otherlv_0, grammarAccess.getGameOfLifeAccess().getGameOfLifeKeyword_0());
		}
		otherlv_1='aliveCells:'
		{
			newLeafNode(otherlv_1, grammarAccess.getGameOfLifeAccess().getAliveCellsKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGameOfLifeAccess().getAliveCellsPointParserRuleCall_2_0());
				}
				lv_aliveCells_2_0=rulePoint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameOfLifeRule());
					}
					add(
						$current,
						"aliveCells",
						lv_aliveCells_2_0,
						"gameOfLife.GameOfLifeDSL.Point");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='evolutionRules:'
		{
			newLeafNode(otherlv_3, grammarAccess.getGameOfLifeAccess().getEvolutionRulesKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGameOfLifeAccess().getEvolutionRulesEvolutionRuleParserRuleCall_4_0());
				}
				lv_evolutionRules_4_0=ruleEvolutionRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameOfLifeRule());
					}
					add(
						$current,
						"evolutionRules",
						lv_evolutionRules_4_0,
						"gameOfLife.GameOfLifeDSL.EvolutionRule");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRulePoint
entryRulePoint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPointRule()); }
	iv_rulePoint=rulePoint
	{ $current=$iv_rulePoint.current; }
	EOF;

// Rule Point
rulePoint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getPointAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_x_1_0=RULE_INT
				{
					newLeafNode(lv_x_1_0, grammarAccess.getPointAccess().getXINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getPointAccess().getCommaKeyword_2());
		}
		(
			(
				lv_y_3_0=RULE_INT
				{
					newLeafNode(lv_y_3_0, grammarAccess.getPointAccess().getYINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPointRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPointAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEvolutionRule
entryRuleEvolutionRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvolutionRuleRule()); }
	iv_ruleEvolutionRule=ruleEvolutionRule
	{ $current=$iv_ruleEvolutionRule.current; }
	EOF;

// Rule EvolutionRule
ruleEvolutionRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='EvolutionRule'
		{
			newLeafNode(otherlv_0, grammarAccess.getEvolutionRuleAccess().getEvolutionRuleKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getEvolutionRuleAccess().getLeftParenthesisKeyword_1());
		}
		otherlv_2='surrounding'
		{
			newLeafNode(otherlv_2, grammarAccess.getEvolutionRuleAccess().getSurroundingKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvolutionRuleAccess().getConditionElementConditionElementEnumRuleCall_3_0());
				}
				lv_conditionElement_3_0=ruleConditionElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvolutionRuleRule());
					}
					set(
						$current,
						"conditionElement",
						lv_conditionElement_3_0,
						"gameOfLife.GameOfLifeDSL.ConditionElement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_amount_4_0=RULE_INT
				{
					newLeafNode(lv_amount_4_0, grammarAccess.getEvolutionRuleAccess().getAmountINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEvolutionRuleRule());
					}
					setWithLastConsumed(
						$current,
						"amount",
						lv_amount_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getEvolutionRuleAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEvolutionRuleAccess().getActionActionEnumRuleCall_6_0());
				}
				lv_action_6_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvolutionRuleRule());
					}
					set(
						$current,
						"action",
						lv_action_6_0,
						"gameOfLife.GameOfLifeDSL.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getEvolutionRuleAccess().getRightParenthesisKeyword_7());
		}
	)
;

// Rule ConditionElement
ruleConditionElement returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getConditionElementAccess().getLOWEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getConditionElementAccess().getLOWEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getConditionElementAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getConditionElementAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getConditionElementAccess().getEQUALEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getConditionElementAccess().getEQUALEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule Action
ruleAction returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='die'
			{
				$current = grammarAccess.getActionAccess().getDIEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getActionAccess().getDIEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='live'
			{
				$current = grammarAccess.getActionAccess().getLIVEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getActionAccess().getLIVEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='becomeAlive'
			{
				$current = grammarAccess.getActionAccess().getBECOMEALIVEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getActionAccess().getBECOMEALIVEEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
